import { db } from "../lib/db";

async function createMechanicProfile() {
  try {
    console.log("üîß Cr√©ation du profil m√©canicien...\n");

    // Trouver l'utilisateur avec r√¥le mechanic
    const mechanicUser = await db.user.findFirst({
      include: {
        role: true,
        mechanic: true
      },
      where: {
        role: {
          name: 'mechanic'
        }
      }
    });

    if (!mechanicUser) {
      console.log("‚ùå Aucun utilisateur avec r√¥le mechanic trouv√©");
      return;
    }

    console.log(`üë§ Utilisateur trouv√©: ${mechanicUser.name} (${mechanicUser.email})`);

    if (mechanicUser.mechanic) {
      console.log("‚úÖ Le profil m√©canicien existe d√©j√†");
      return;
    }

    // Trouver une station pour l'assignation
    const station = await db.station.findFirst();
    if (!station) {
      console.log("‚ùå Aucune station trouv√©e. Veuillez d'abord cr√©er une station.");
      return;
    }

    // Cr√©er le profil m√©canicien
    const mechanicProfile = await db.mechanic.create({
      data: {
        userId: mechanicUser.id,
        firstName: mechanicUser.name?.split(' ')[0] || 'Pr√©nom',
        lastName: mechanicUser.name?.split(' ')[1] || 'Nom',
        phone: mechanicUser.phone || '+221 XX XXX XXXX',
        email: mechanicUser.email + '.mechanic', // Email unique pour le m√©canicien
        specialties: ['MECHANICAL', 'ELECTRICAL', 'ENGINE'],
        isAvailable: true,
        stationId: station.id
      }
    });

    console.log(`‚úÖ Profil m√©canicien cr√©√© avec succ√®s:`);
    console.log(`   ID: ${mechanicProfile.id}`);
    console.log(`   Nom: ${mechanicProfile.firstName} ${mechanicProfile.lastName}`);
    console.log(`   Sp√©cialit√©s: ${mechanicProfile.specialties.join(', ')}`);
    console.log(`   Disponible: ${mechanicProfile.isAvailable}`);

    // Cr√©er quelques demandes de test assign√©es √† ce m√©canicien
    console.log("\nüìã Cr√©ation de demandes de test...");

    const testRequests = [
      {
        requesterName: "Jean Dupont",
        requesterPhone: "+221 77 123 4567",
        requesterEmail: "jean.dupont@example.com",
        description: "Panne moteur - V√©hicule ne d√©marre plus",
        address: "Dakar, Senegal",
        latitude: 14.7167,
        longitude: -17.4677,
        breakdownType: "ENGINE",
        status: "PENDING",
        priority: 3,
        mechanicId: mechanicProfile.id
      },
      {
        requesterName: "Marie Ndiaye",
        requesterPhone: "+221 77 987 6543",
        requesterEmail: "marie.ndiaye@example.com",
        description: "Probl√®me √©lectrique - Phares d√©faillants",
        address: "Pikine, Senegal",
        latitude: 14.7645,
        longitude: -17.3972,
        breakdownType: "ELECTRICAL",
        status: "IN_PROGRESS",
        priority: 2,
        mechanicId: mechanicProfile.id
      },
      {
        requesterName: "Amadou Ba",
        requesterPhone: "+221 77 555 1234",
        requesterEmail: "amadou.ba@example.com",
        description: "Pneu crev√© urgent",
        address: "Guediawaye, Senegal",
        latitude: 14.7692,
        longitude: -17.4103,
        breakdownType: "TIRE", 
        status: "PENDING",
        priority: 3,
        mechanicId: mechanicProfile.id
      }
    ];

    for (const request of testRequests) {
      const created = await db.request.create({
        data: request
      });
      console.log(`   ‚úÖ Demande cr√©√©e: ${created.description} (${created.status})`);
    }

    console.log("\nüéâ Configuration termin√©e avec succ√®s !");

  } catch (error) {
    console.error("‚ùå Erreur:", error);
  } finally {
    await db.$disconnect();
  }
}

createMechanicProfile();
